
var testRunner = require('./singleTestReporter');
    
//
// This method runs a test *testName* from *testModule* and calls the callback on the 
// test result. The callback on the test result upon completion.
// testModule {object}: The test module. All functions in this object must be nodeunit tests, or a group of tests
// testName {string}: The name of the test. must be a name generated by enumTests method
// context {object}: Test context. Attached to each nodeunit test's 'test' parameter
// callback {function}: A call back function called upon test completion and receiving the test
//           result as it's first argument
exports.runTest = function (testModule, testName, callback, context) {
    var testMethod,
        previousTestMethod;

    testMethod = getTest(testModule, testName);

    if (testMethod) {
        if (context) {
            previousTestMethod = testMethod;
            testMethod = function (test) {
                test.context = context;
                previousTestMethod(test);
            };
        }
    }
    // surround the run with try catch, in case there was any error with running the test method
    try {
        testRunner.run(testName, testMethod, callback);
    } catch (e) {
        console.log(e.toString());
        callback('ERROR - failed to run test "' + testName + '"');
    }
};

//
// applies *callback* on an array containing the tests names from testSuite.
// assuming testSuite's functions are nodeunit style tests
// testSuite {object}: The test suite;
// callback {function}: A callback receiving the test enumaration (array) as its first argument
exports.enumTests = function (testSuite, callback) {
    var tests = enumarateGroup(testSuite);
    callback(null, tests);
};

// 
// private methods:

//
// enumarates a group of tests by recursivly flatenning the tree like structure nodeunit tests have
// returns a flat array of tests names. names are prefixed by their containing group followed by an underscore
var enumarateGroup = function (group, namePrefix) {
    var tests = [],
        key,
        testName;

    function addTest(testName) {
        tests.push(testName);
    }

    for (key in group) {
        if (group.hasOwnProperty(key)) {
            if (typeof group[key] === 'function') {
                testName = namePrefix ? namePrefix + key : key;
                tests.push(testName);
            } else { // else key is a group of tests
                enumarateGroup(group[key], (namePrefix ? (namePrefix + key + '_') : (key + '_'))).forEach(addTest);
            }
        }
    }

    return tests;
};

//
// get the a test from a testModule, recursively searching for the containing group of the test by parsing the testName
// by underscore.
var getTest = function (testModule, testName) {
    var testNamePieces = testName.split('_'),
        i,
        group = testModule;

    // dive into the tests tree until reaching the group containing the testMethod
    for (i = 0; i < testNamePieces.length - 1; i++) {
        group = group[testNamePieces[i]];
    }

    // extract the test from the containing group
    testMethod = group[testNamePieces[testNamePieces.length - 1]];
    return testMethod;
};


